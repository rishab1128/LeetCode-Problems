class Solution {
public:
    
    vector<int>adj[301];
    map<int,vector<int>>imp;
    
    void bfs(vector<int>&arr , int start , int n)
    {
        vector<int>vis(n+1,0);
        for(auto x: arr)
            vis[x]=1;
        queue<int>q;
        q.push(start);
        int ct=0;
        while(q.size()>0)
        {
            int node=q.front();
            q.pop();
            for(auto neigh : adj[node])
            {
                if(!vis[neigh])
                {
                    imp[neigh].push_back(start);     
                    vis[neigh]=1;
                    q.push(neigh);
                }
            }
        }
        return;
    }
    
    

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
        for(int i=0; i<301; i++)adj[i].clear();
        imp.clear();

        int n=graph.size();
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(i!=j and graph[i][j])
                    adj[i].push_back(j);
            }
        }
        
        int m=initial.size();
        map<int,int>mp;
        for(int i=0; i<m; i++)
        {
            mp[initial[i]]=0;
            bfs(initial,initial[i],n);
        }
        
        
        for(auto x: imp)
        {
            int node=x.first;
            if(imp[node].size()==1)
            {
                int u=imp[node][0];
                mp[u]++;
            }
        }
        
        int maxi=INT_MIN , ans=-1;
        for(auto x: mp)
        {
            int node=x.first;
            if(mp[node]>maxi)
            {
                maxi=mp[node];
                ans=node;
            }
            else if(mp[node]==maxi)
                ans=min(ans,node);
        }
        
        return ans;
        
        
    }
};